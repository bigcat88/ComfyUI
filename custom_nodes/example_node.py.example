# Example custom nodes using the V3 ComfyAPI.
# Drop this file into custom_nodes/ as example_node.py to try it.
#
# V3 basics:
# - Subclass io.ComfyNode
# - Implement @classmethod define_schema() -> io.Schema
# - Implement @classmethod execute(...) -> io.NodeOutpute
# - Optionally implement validate_inputs / check_lazy_status / fingerprint_inputs
# - Package nodes with a ComfyExtension and an async comfy_entrypoint()

import torch
from typing_extensions import override

from comfy_api.latest import ComfyExtension, io, ui


class ExampleInvertImage(io.ComfyNode):
    """A minimal V3 node: inverts an image, with a toggle and preview."""

    @classmethod
    def define_schema(cls) -> io.Schema:
        return io.Schema(
            node_id="Example_InvertImage",
            display_name="Example: Invert Image",
            category="examples",
            description="Invert image colors. Demonstrates V3 schema, boolean widget, and UI preview.",
            inputs=[
                io.Image.Input("image", tooltip="Image tensor [B,H,W,C] in 0..1"),
                io.Boolean.Input("enabled", default=True, label_on="Invert", label_off="Pass-through"),
                io.Float.Input("brightness", default=0.0, min=-1.0, max=1.0, step=0.01, tooltip="Additive brightness after invert", display_mode=io.NumberDisplay.slider),
                io.String.Input("note", default="", multiline=True, optional=True, tooltip="Optional note (not used in computation)"),
            ],
            outputs=[
                io.Image.Output(display_name="optional_display_name"),
            ],
        )

    @classmethod
    def execute(cls, image, enabled, brightness, note) -> io.NodeOutput:
        out = image
        if enabled:
            out = 1.0 - out
            if brightness is not None and brightness != 0.0:
                out = torch.clamp(out + float(brightness), 0.0, 1.0)

        # Return the tensor and a temporary preview in the UI panel.
        return io.NodeOutput(out, ui=ui.PreviewImage(out, cls=cls))

    # @classmethod
    # def fingerprint_inputs(cls, some_path):
    #     """
    #         The node will always be re-executed if any of the inputs change but
    #         this method can be used to force the node to execute again even when the inputs don't change.
    #         You can make this node return a number or a string. This value will be compared to the one returned the last time the node was
    #         executed, if it is different the node will be executed again.
    #         This method is used in the core repo for the LoadImage node where they return the image hash as a string, if the image hash
    #         changes between executions the LoadImage node is executed again.
    #     """
    #     image_path = folder_paths.get_annotated_filepath(some_path)
    #     m = hashlib.sha256()
    #     with open(image_path, "rb") as f:
    #         m.update(f.read())
    #     return m.digest().hex()

    # @classmethod
    # def check_lazy_status(cls, image, string_field, int_field, float_field, print_to_screen):
    #     """
    #         Return a list of input names that need to be evaluated.
    #
    #         This function will be called if there are any lazy inputs which have not yet been
    #         evaluated. As long as you return at least one field which has not yet been evaluated
    #         (and more exist), this function will be called again once the value of the requested
    #         field is available.
    #
    #         Any evaluated inputs will be passed as arguments to this function. Any unevaluated
    #         inputs will have the value None.
    #     """
    #     if print_to_screen == "enable":
    #         return ["int_field", "float_field", "string_field"]
    #     else:
    #         return []


class ExampleSaveImage(io.ComfyNode):
    """Output node example that saves images to the output folder."""

    @classmethod
    def define_schema(cls) -> io.Schema:
        return io.Schema(
            node_id="Example_SaveImage",
            display_name="Example: Save Image",
            category="examples",
            description="Save images to ComfyUI output directory. Demonstrates is_output_node and hidden metadata.",
            inputs=[
                io.Image.Input("images", tooltip="Batch of images [B,H,W,C] in 0..1"),
                io.String.Input("filename_prefix", default="example/ComfyUI", tooltip="Output prefix; supports ComfyUI format placeholders"),
                io.Int.Input("compress_level", default=4, min=0, max=9, step=1, tooltip="PNG compression level"),
            ],
            outputs=[],  # output node: no graph outputs, just a UI preview
            is_output_node=True,  # adds prompt/extra_pnginfo to hidden automatically
        )

    @classmethod
    def validate_inputs(cls, filename_prefix) -> bool | str:
        if ".." in filename_prefix:
            return "filename_prefix must not contain '..'"
        return True

    @classmethod
    def execute(cls, images, filename_prefix, compress_level) -> io.NodeOutput:
        # `prompt` and `extra_pnginfo` available through `cls`
        # print(cls.hidden.prompt, flush=True)
        # print(cls.hidden.extra_pnginfo, flush=True)
        # Save and return a UI object with clickable thumbnails.
        saved = ui.ImageSaveHelper.get_save_images_ui(
            images, filename_prefix=filename_prefix, cls=cls, compress_level=int(compress_level)
        )
        return io.NodeOutput(ui=saved)


# Set the web directory, any .js file in that directory will be loaded by the frontend as a frontend extension
# WEB_DIRECTORY = "./somejs"


# Add custom API routes, using router
from aiohttp import web
from server import PromptServer

@PromptServer.instance.routes.get("/hello")
async def get_hello(request):
    return web.json_response("hello")


class ExampleExtension(ComfyExtension):
    """Registers all example V3 nodes in this file."""

    @override
    async def get_node_list(self) -> list[type[io.ComfyNode]]:
        return [
            ExampleInvertImage,
            ExampleSaveImage,
        ]


async def comfy_entrypoint() -> ExampleExtension:
    # ComfyUI calls this to load your extension and its nodes.
    return ExampleExtension()
